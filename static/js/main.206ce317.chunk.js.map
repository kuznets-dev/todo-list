{"version":3,"sources":["components/TodoForm.js","components/TodoItem.js","components/TodoList.js","components/TodoFilter.js","components/TodoSort.js","components/Pagination.js","axiosConfig.js","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","addTodo","useState","todoName","setTodoName","handleSumbit","event","preventDefault","onSubmit","TextField","value","onChange","target","onKeyDown","key","placeholder","margin","fullWidth","InputLabelProps","shrink","variant","TodoItem","todo","removeTodo","changeTodo","changeNameTodo","setChangeNameTodo","name","ListItem","Grid","container","direction","alignItems","item","xs","Checkbox","onClick","done","handleDone","icon","checkedIcon","color","checked","multiline","autoFocus","e","handleKeyDown","onBlur","ListItemText","primary","style","overflowWrap","updatedAt","IconButton","aria-label","uuid","TodoList","todos","checkTodo","List","map","TodoFilter","todoStatus","setTodoStatus","ButtonGroup","Button","TodoSort","todoSort","setTodoSort","handleSort","date","Typography","component","size","fontSize","Pagination","totalTodos","perPage","setCurrentpage","pageNumber","i","Math","ceil","push","justify","ArrowBackIos","length","ArrowForwardIos","axios","create","baseURL","App","setTodos","currentPage","alert","message","statusCode","errorAlert","setErrorAlert","fetchTodos","useCallback","a","get","params","filterBy","order","response","data","useEffect","post","status","id","delete","patch","handleClose","prev","paginationTodo","useMemo","indexOfLastPost","indexOfFirstPost","slice","className","align","Snackbar","open","autoHideDuration","onClose","Alert","severity","AlertTitle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.206ce317.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\n\nfunction TodoForm({ addTodo }) {\n    const [todoName, setTodoName] = useState('');\n\n    const handleChange = (event => {\n        setTodoName(event.target.value)\n    })\n\n    const handleSumbit = (event => {\n        event.preventDefault();\n        addTodo(todoName);\n        setTodoName('');\n    })\n\n    const handleKeyDown = (event => {\n        if (event.key === 'Enter') {\n            handleSumbit(event);\n        }\n    })\n\n    return (\n        <form onSubmit={handleSumbit}>\n            <TextField\n                value={todoName}\n                onChange={handleChange}\n                onKeyDown={handleKeyDown} \n                placeholder=\"I want to...\"\n                margin=\"normal\"\n                fullWidth\n                InputLabelProps={{\n                    shrink: true,\n                }}\n                variant=\"outlined\"\n            />\n        </form>\n    )\n}\n\nexport default TodoForm;","import React, {useState} from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Checkbox, Grid, ListItemText, TextField } from '@material-ui/core';\nimport DoneIcon from '@material-ui/icons/Done';\nimport DoneAllIcon from '@material-ui/icons/DoneAll';\n\nfunction TodoItem({ todo, removeTodo, changeTodo }) {\n\n    const [changeNameTodo, setChangeNameTodo] = useState(false);\n    const [todoName, setTodoName] = useState(todo.name);\n\n    const handleKeyDown = (todo, e) => {\n        if (e.key === \"Enter\") {\n            e.preventDefault();\n\n            setChangeNameTodo(false);\n            changeTodo(todo, todoName, todo.done);\n        };\n        if (e.key === \"Escape\") {\n            setChangeNameTodo(false);\n            setTodoName(todo.name);\n        };\n    }\n\n    const handleDone = (todo) => {\n        changeTodo(todo, todoName, !todo.done)\n    }\n\n    const onBlur = () => {\n        setChangeNameTodo(false);\n        setTodoName(todo.name);\n    }\n\n    return (\n        <ListItem>\n            <Grid\n                container\n                direction=\"row\"\n                alignItems=\"center\">\n                <Grid item xs={1}>\n                    <Checkbox\n                    onClick={() => handleDone(todo)}\n                    icon={<DoneIcon />}\n                    checkedIcon={<DoneAllIcon\n                    color=\"primary\" />}\n                    checked={todo.done} />\n                </Grid>\n                <Grid item xs={8}>\n                    {changeNameTodo \n                        ? <TextField \n                            multiline={true}\n                            value={todoName}\n                            autoFocus={true}\n                            variant='outlined'\n                            onChange={(e) => setTodoName(e.target.value)}\n                            onKeyDown={(e) => handleKeyDown(todo, e)} \n                            onBlur={onBlur} />\n                        :   <ListItemText\n                            primary={todo.name}\n                            style={{overflowWrap: 'break-word'}}\n                            multiline='true'\n                            onClick={() => setChangeNameTodo(true)} />\n                    }\n                </Grid>\n                <Grid item xs={2}>\n                    <ListItemText>\n                        {todo.updatedAt}\n                    </ListItemText>\n                </Grid>\n                <Grid item xs={1}>\n                    <IconButton\n                        aria-label=\"delete\"\n                        onClick={() => removeTodo(todo.uuid)}>\n                        <DeleteIcon />\n                    </IconButton>\n                </Grid>\n            </Grid>\n        </ListItem>\n    )\n}\n\nexport default TodoItem;","import List from '@material-ui/core/List';\nimport TodoItem from './TodoItem';\n\nfunction TodoList({ todos, removeTodo, checkTodo, changeTodo }) {\n    return (\n        <List>\n            {todos.map(todo => \n                <TodoItem\n                    key={todo.uuid}\n                    todo={todo}\n                    removeTodo={removeTodo}\n                    checkTodo={checkTodo}\n                    changeTodo={changeTodo}\n                />)\n            }\n        </List>\n    )\n}\n\nexport default TodoList;","import React from 'react';\nimport { Button, ButtonGroup } from '@material-ui/core';\n\nfunction TodoFilter({ todoStatus, setTodoStatus }) {\n\n    return (\n        <ButtonGroup>\n            <Button\n                onClick={() => setTodoStatus('')}\n                variant={todoStatus === \"\" ? \"contained\" : \"outlined\"}\n                color=\"default\">\n                All\n            </Button>\n            <Button\n                onClick={() => setTodoStatus('done')}\n                variant={todoStatus === \"done\" ? \"contained\" : \"outlined\"}\n                color=\"primary\">\n                Done\n            </Button>\n            <Button\n                onClick={() => setTodoStatus('undone')}\n                variant={todoStatus === \"undone\" ? \"contained\" : \"outlined\"}\n                color=\"secondary\">\n                Undone\n            </Button>\n        </ButtonGroup>\n    )\n}\n\nexport default TodoFilter;","import React from 'react';\nimport { Grid, IconButton, Typography } from '@material-ui/core';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\n\nfunction TodoSort({ todoSort, setTodoSort}) {\n\n    const handleSort = (date) => {\n        if (date !== todoSort){\n            setTodoSort(date);\n        }\n    }\n\n    return (\n        <Grid\n            container\n            direction=\"row\"\n            alignItems=\"center\">\n            <Typography\n                variant=\"h6\"\n                component=\"h2\">\n                Sorted by Date\n            </Typography>\n            <IconButton\n                color={todoSort ? 'primary' : 'default'}\n                onClick={() => handleSort(true)}\n                aria-label=\"delete\"\n                size=\"small\">\n                <ArrowUpwardIcon fontSize=\"inherit\" />\n            </IconButton>\n            <IconButton\n                color={!todoSort ? 'primary' : 'default'}\n                onClick={() => handleSort(false)}\n                aria-label=\"delete\"\n                size=\"small\">\n                <ArrowDownwardIcon fontSize=\"inherit\" />\n            </IconButton>\n        </Grid>\n    )\n}\n\nexport default TodoSort;","import { Button, ButtonGroup, Grid } from '@material-ui/core';\nimport { ArrowBackIos, ArrowForwardIos } from '@material-ui/icons';\nimport React from 'react';\n\nfunction Pagination({ totalTodos, perPage, setCurrentpage }) {\n    const pageNumber = [];\n\n    for (let i = 1; i <= Math.ceil(totalTodos / perPage); i++) {\n        pageNumber.push(i);\n    }\n\n    return (\n        <Grid\n            container\n            justify='center'>\n            <Button\n                color='primary'\n                onClick={() => setCurrentpage(1)}>\n                <ArrowBackIos />\n            </Button>\n            <Grid>\n                <ButtonGroup>\n                    {pageNumber.map(item => (\n                        <Button\n                            key={item}\n                            color='default'\n                            variant='outlined'\n                            onClick={() => setCurrentpage(item)}>\n                            {item}\n                        </Button>\n                    ))}\n                </ButtonGroup>\n            </Grid>\n            <Button\n                color='primary'\n                onClick={() => setCurrentpage(pageNumber.length)}>\n                <ArrowForwardIos />\n            </Button>\n        </Grid>\n    )\n}\n\nexport default Pagination;","import axios from 'axios';\n\nexport default axios.create({\n    baseURL: `https://todo-api-learning.herokuapp.com`\n});","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport TodoForm from './components/TodoForm';\nimport TodoList from './components/TodoList';\nimport TodoFilter from './components/TodoFilter';\nimport TodoSort from './components/TodoSort';\nimport { Grid } from '@material-ui/core';\nimport Pagination from './components/Pagination';\nimport axios from './axiosConfig';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Alert from '@material-ui/lab/Alert';\nimport { AlertTitle } from '@material-ui/lab';\n\nfunction App() {\n\n    // State\n    const [todos, setTodos] = useState([]);\n    const [todoStatus, setTodoStatus] = useState('');\n    const [todoSort, setTodoSort] = useState(true);\n    const [currentPage, setCurrentpage] = useState(1);\n    const [errorAlert, setErrorAlert] = useState({alert: false, message: 'message', statusCode: 'status'});\n    \n    // Fetch API\n    // GET\n    const fetchTodos = useCallback(async () => {\n        const response = await axios.get('/v1/tasks/1', {\n        params: {\n            filterBy: todoStatus,\n            order: todoSort ? \"asc\" : 'desc'\n        }});\n        setTodos(response.data)\n    }, [todoStatus, todoSort]);\n\n    useEffect(() => {\n        fetchTodos()\n    }, [fetchTodos])\n\n    // POST\n    // Add new todo\n    const addTodo = async (todoName) => {\n        try {\n            await axios.post('/v1/task/1', \n            {\n                name: todoName,\n                done: false,\n            });\n            await fetchTodos();\n        }\n        catch (err) {\n            const message = err.response.data.message;\n            const status = err.response.status;   \n            setErrorAlert({alert: true, message: message, statusCode: status});\n        }\n    }\n\n    // DELETE\n    // Remove todo\n    const removeTodo = async (id) => {\n        try {\n            await axios.delete(`/v1/task/1/${id}`);\n            await fetchTodos();\n        }\n        catch (err) {\n            const message = err.response.data.message;\n            const status = err.response.status;   \n            setErrorAlert({alert: true, message: message, statusCode: status});\n        }\n    }    \n    // PATCH\n    // Change and rename todo\n    const changeTodo = async (todo, name, done) => {\n        try {\n            await axios.patch(`/v1/task/1/${todo.uuid}`, {\n                name: name,\n                done: done\n            });\n            await fetchTodos();\n        }\n        catch (err) {\n            const message = err.response.data.message;\n            const status = err.response.status;   \n            setErrorAlert({alert: true, message: message, statusCode: status});\n        }\n    }\n\n    const handleClose = () => {\n        setErrorAlert(prev => ({...prev, alert: false}));\n    }\n\n    // Pagination\n    const perPage = 5;\n    const paginationTodo = useMemo(() => {\n        const indexOfLastPost = currentPage * perPage;\n        const indexOfFirstPost = indexOfLastPost - perPage;\n        const currentTodos = todos.slice(indexOfFirstPost, indexOfLastPost);\n        return currentTodos;\n    }, [currentPage, perPage, todos]);\n\n    return (\n        <div className=\"wrapper\">\n            <Typography\n                variant=\"h1\"\n                component=\"h2\"\n                align=\"center\">\n                Todo\n            </Typography>\n            <TodoForm addTodo={addTodo}/>\n            <Grid\n                container\n                direction=\"row\"\n                justify=\"space-between\"\n                alignItems=\"center\">\n                <Grid>\n                    <TodoFilter\n                        todoStatus={todoStatus}\n                        setTodoStatus={setTodoStatus}\n                    />\n                </Grid>\n                <Grid>\n                    <TodoSort\n                        todoSort={todoSort}\n                        setTodoSort={setTodoSort}>\n                    </TodoSort>\n                </Grid>\n            </Grid>\n            <TodoList \n                todos={paginationTodo}\n                removeTodo={removeTodo}\n                changeTodo={changeTodo}\n            />\n            {(todos.length >= 5) && \n                <Pagination\n                    totalTodos={todos.length}\n                    perPage={perPage}\n                    currentPage={currentPage}\n                    setCurrentpage={setCurrentpage}>\n                </Pagination>\n            }\n            <Snackbar open={errorAlert.alert} autoHideDuration={3000} onClose={handleClose}>\n                <Alert onClose={handleClose} severity=\"error\">\n                    <AlertTitle>{`${errorAlert.message}`}</AlertTitle>\n                    {`Status code: ${errorAlert.statusCode}`}\n                </Alert>\n            </Snackbar>\n        </div>\n    )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}